name: Build UIBase

on:
  push:
    branches: [master]
    tags:
      - "*"
  pull_request:
    types: [opened, synchronize, reopened]

#env:
#  VCPKG_BINARY_SOURCES: clear;x-azblob,${{ vars.AZ_BLOB_VCPKG_URL }},${{ secrets.AZ_BLOB_SAS }},readwrite

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-2022, ubuntu-24.04 ]
        include:
          - os: windows-2022
            build_dir: vsbuild
            prefix_path: "${env:QT_ROOT_DIR}\\msvc2022_64;"
            os_name: windows
          - os: ubuntu-24.04
            build_dir: build
            prefix_path: "$QT_ROOT_DIR;"
            os_name: linux

    runs-on: ${{ matrix.os }}
    steps:
      - name: Install build dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y \
          build-essential cmake curl git ninja-build pkg-config tar unzip wget zip

      - name: Restore GCC
        if: runner.os == 'Linux'
        id: cache-gcc-restore
        uses: actions/cache/restore@v4
        with:
          path: /opt/gcc-15
          key: gcc-15.2

      - name: Build and install GCC 15.2
        if: runner.os == 'Linux' && steps.cache-gcc-restore.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install -y make gawk flex bison libgmp-dev libmpfr-dev libmpc-dev python3 binutils perl libisl-dev libzstd-dev gzip bzip2
          mkdir gcc-15
          cd gcc-15
          git clone https://gcc.gnu.org/git/gcc.git -b releases/gcc-15.2.0 --depth 1 gcc-15-source
          cd gcc-15-source
          ./contrib/download_prerequisites
          cd ..
          mkdir build
          cd build
          ../gcc-15-source/configure --prefix=/opt/gcc-15 --disable-multilib --enable-languages=c,c++
          make -j$(nproc)
          sudo make install

      - name: Save GCC
        id: cache-gcc-save
        if: runner.os == 'Linux' && steps.cache-gcc-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.cache-gcc-restore.outputs.cache-primary-key }}
          path: |
            /opt/gcc-15

      - name: Set GCC 15.2 as default
        if: runner.os == 'Linux'
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /opt/gcc-15/bin/gcc 100
          sudo update-alternatives --install /usr/bin/g++ g++ /opt/gcc-15/bin/g++ 100

      - name: Configure UIBase
        id: configure-uibase
        uses: Kaedras/build-with-mob-action@master
        with:
          # skip build because we are going to build both Debug and RelWithDebInfo here
          mo2-skip-build: true
          mo2-owner: Kaedras

      # build both Debug and RelWithDebInfo for package
      - name: Build UI Base
        working-directory: ${{ steps.configure-uibase.outputs.working-directory }}
        run: |
          cmake --build ${{ matrix.build_dir }} --config Debug --target uibase-tests --verbose
          cmake --build ${{ matrix.build_dir }} --config RelWithDebInfo --target uibase-tests --verbose

      - name: Test UI Base
        working-directory: ${{ steps.configure-uibase.outputs.working-directory }}
        run: |
          ctest --test-dir ${{ matrix.build_dir }} -C Debug --output-on-failure
          ctest --test-dir ${{ matrix.build_dir }} -C RelWithDebInfo --output-on-failure

      - name: Install UI Base
        working-directory: ${{ steps.configure-uibase.outputs.working-directory }}
        run: |
          cmake --install ${{ matrix.build_dir }} --config Debug
          cmake --install ${{ matrix.build_dir }} --config RelWithDebInfo

      # this tests that UI Base can be properly used as a CMake package
      - name: Test UI Base package
        run: |
          cmake -B build_tests . "-DCMAKE_PREFIX_PATH=${{ matrix.prefix_path }}${{ github.workspace }}/install/lib/cmake/"
          cmake --build build_tests --config Debug
          cmake --build build_tests --config Release
          cmake --build build_tests --config RelWithDebInfo
        working-directory: ${{ steps.configure-uibase.outputs.working-directory }}/tests/cmake

      - name: Upload UI Base artifact
        uses: actions/upload-artifact@master
        with:
          name: uibase_${{ matrix.os_name }}
          path: ./install

  publish:
    if: github.ref_type == 'tag'
    needs: build
    runs-on: windows-2022
    permissions:
      contents: write
    steps:
      - name: Download Windows Artifact
        uses: actions/download-artifact@master
        with:
          name: uibase_windows
          path: ./install_windows

      - name: Download Linux Artifact
        uses: actions/download-artifact@master
        with:
          name: uibase_linux
          path: ./install_linux

      - name: Create UI Base archives
        run: |
          7z a uibase_${{ github.ref_name }}_windows.7z ./install_windows/*
          7z a uibase_${{ github.ref_name }}_linux.7z ./install_linux/*

      - name: Publish Release
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
        run: gh release create --draft=false --notes="${{ github.ref_name }}" "${{ github.ref_name }}" ./uibase_${{ github.ref_name }}_windows.7z ./uibase_${{ github.ref_name }}_linux.7z
